//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\u1\Documents\Java Decompiler\1.12 stable mappings"!

//Decompiled by Procyon!

package com.veteran.hack.module.modules.exploits;

import com.veteran.hack.module.*;
import net.minecraft.util.math.*;
import net.minecraft.entity.*;
import net.minecraftforge.event.entity.living.*;
import me.zero.alpine.listener.*;
import com.veteran.hack.event.events.*;
import net.minecraftforge.event.world.*;
import net.minecraftforge.client.event.*;
import java.util.function.*;
import net.minecraft.world.*;
import net.minecraft.client.entity.*;
import net.minecraft.network.play.server.*;
import net.minecraft.network.play.client.*;
import net.minecraft.entity.player.*;

@Module.Info(name = "Dupe Freecam", category = Module.Category.EXPLOIT, description = "modified freecam from TAE to minimize ram usage and remove another client")
public class DupeFreecam extends Module
{
    private static Vec3d pos;
    private static Vec2f pitchyaw;
    private static boolean isRidingEntity;
    public static boolean enabled;
    private static Entity ridingEntity;
    private static EntityOtherPlayerMP originalPlayer;
    @EventHandler
    private Listener<LivingEvent.LivingUpdateEvent> livingUpdateListener;
    @EventHandler
    private Listener<PacketEvent.Send> receiveListener;
    @EventHandler
    private Listener<PacketEvent.Receive> getListener;
    @EventHandler
    private Listener<WorldEvent.Load> worldLoadListener;
    @EventHandler
    private Listener<RenderLivingEvent.Pre> renderLivingListener;
    @EventHandler
    private Listener<RenderLivingEvent.Specials.Pre> renderTagListener;
    
    public DupeFreecam() {
        this.livingUpdateListener = (Listener<LivingEvent.LivingUpdateEvent>)new Listener(e -> {
            if (!DupeFreecam.enabled || !e.getEntity().equals((Object)DupeFreecam.mc.player) || DupeFreecam.mc.player == null) {
                return;
            }
            if (DupeFreecam.mc.player == null || DupeFreecam.mc.player.capabilities == null) {
                return;
            }
            DupeFreecam.mc.player.capabilities.allowFlying = true;
            DupeFreecam.mc.player.capabilities.isFlying = true;
            DupeFreecam.mc.player.capabilities.setFlySpeed(0.5f);
            DupeFreecam.mc.player.noClip = true;
            DupeFreecam.mc.player.onGround = false;
            DupeFreecam.mc.player.fallDistance = 0.0f;
            if (!DupeFreecam.mc.gameSettings.keyBindForward.isPressed() && !DupeFreecam.mc.gameSettings.keyBindBack.isPressed() && !DupeFreecam.mc.gameSettings.keyBindLeft.isPressed() && !DupeFreecam.mc.gameSettings.keyBindRight.isPressed() && !DupeFreecam.mc.gameSettings.keyBindJump.isPressed() && !DupeFreecam.mc.gameSettings.keyBindSneak.isPressed()) {
                DupeFreecam.mc.player.setVelocity(0.0, 0.0, 0.0);
            }
        }, new Predicate[0]);
        this.receiveListener = (Listener<PacketEvent.Send>)new Listener(e -> {
            if (!DupeFreecam.enabled || DupeFreecam.originalPlayer == null || DupeFreecam.mc.player == null) {
                return;
            }
            if (e.getPacket() instanceof CPacketPlayer) {
                e.cancel();
            }
        }, new Predicate[0]);
        this.getListener = (Listener<PacketEvent.Receive>)new Listener(e -> {
            if (!DupeFreecam.enabled || DupeFreecam.originalPlayer == null || DupeFreecam.mc.player == null) {
                return;
            }
            if (e.getPacket() instanceof SPacketPlayerPosLook) {
                final SPacketPlayerPosLook packet = (SPacketPlayerPosLook)e.getPacket();
                DupeFreecam.pos = new Vec3d(packet.getX(), packet.getY(), packet.getZ());
                e.cancel();
            }
        }, new Predicate[0]);
        this.worldLoadListener = (Listener<WorldEvent.Load>)new Listener(e -> {
            if (!DupeFreecam.enabled || DupeFreecam.originalPlayer == null || DupeFreecam.mc.player == null) {
                return;
            }
            DupeFreecam.pos = DupeFreecam.mc.player.getPositionVector();
        }, new Predicate[0]);
        this.renderLivingListener = (Listener<RenderLivingEvent.Pre>)new Listener(e -> {
            if (DupeFreecam.originalPlayer != null && DupeFreecam.mc.player != null && DupeFreecam.mc.player.equals((Object)e.getEntity())) {
                e.setCanceled(true);
            }
        }, new Predicate[0]);
        this.renderTagListener = (Listener<RenderLivingEvent.Specials.Pre>)new Listener(e -> {
            if (DupeFreecam.originalPlayer != null && DupeFreecam.mc.player != null && DupeFreecam.mc.player.equals((Object)e.getEntity())) {
                e.setCanceled(true);
            }
        }, new Predicate[0]);
    }
    
    public void onEnable() {
        if (DupeFreecam.mc.player == null || DupeFreecam.mc.world == null) {
            return;
        }
        DupeFreecam.enabled = true;
        if (DupeFreecam.isRidingEntity = DupeFreecam.mc.player.isRiding()) {
            DupeFreecam.ridingEntity = DupeFreecam.mc.player.getRidingEntity();
            DupeFreecam.mc.player.dismountRidingEntity();
        }
        DupeFreecam.pos = DupeFreecam.mc.player.getPositionVector();
        DupeFreecam.pitchyaw = DupeFreecam.mc.player.getPitchYaw();
        (DupeFreecam.originalPlayer = new EntityOtherPlayerMP((World)DupeFreecam.mc.world, DupeFreecam.mc.getSession().getProfile())).copyLocationAndAnglesFrom((Entity)DupeFreecam.mc.player);
        DupeFreecam.originalPlayer.rotationYawHead = DupeFreecam.mc.player.rotationYawHead;
        DupeFreecam.originalPlayer.inventory = DupeFreecam.mc.player.inventory;
        DupeFreecam.originalPlayer.inventoryContainer = DupeFreecam.mc.player.inventoryContainer;
        DupeFreecam.mc.world.addEntityToWorld(-100, (Entity)DupeFreecam.originalPlayer);
    }
    
    public void onDisable() {
        final EntityPlayerSP entityPlayerSP = DupeFreecam.mc.player;
        if (entityPlayerSP == null || ((EntityPlayer)entityPlayerSP).capabilities == null) {
            return;
        }
        final PlayerCapabilities gmCaps = new PlayerCapabilities();
        DupeFreecam.mc.playerController.getCurrentGameType().configurePlayerCapabilities(gmCaps);
        final PlayerCapabilities capabilities = ((EntityPlayer)entityPlayerSP).capabilities;
        capabilities.allowFlying = gmCaps.allowFlying;
        capabilities.isFlying = (gmCaps.allowFlying && capabilities.isFlying);
        capabilities.setFlySpeed(gmCaps.getFlySpeed());
        if (DupeFreecam.mc.player == null || DupeFreecam.originalPlayer == null) {
            return;
        }
        DupeFreecam.enabled = false;
        DupeFreecam.mc.world.removeEntityFromWorld(-100);
        DupeFreecam.originalPlayer = null;
        DupeFreecam.mc.player.noClip = false;
        DupeFreecam.mc.player.setVelocity(0.0, 0.0, 0.0);
        if (DupeFreecam.isRidingEntity) {
            DupeFreecam.mc.player.startRiding(DupeFreecam.ridingEntity, true);
            DupeFreecam.ridingEntity = null;
            DupeFreecam.isRidingEntity = false;
        }
    }
    
    static {
        DupeFreecam.pos = Vec3d.ZERO;
        DupeFreecam.pitchyaw = Vec2f.ZERO;
        DupeFreecam.enabled = false;
    }
}
